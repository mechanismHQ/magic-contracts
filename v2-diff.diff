--- ../bridge/contracts/bridge.clar	2022-08-26 11:41:24
+++ ./contracts/magic.clar	2023-06-09 11:00:39
@@ -19,21 +19,21 @@
 ;; supplier-id -> xBTC
 (define-map supplier-escrow uint uint)
 
-;; info for inbound swaps
 (define-map inbound-swaps (buff 32) {
-  swapper: uint,
+  swapper: principal,
   xbtc: uint,
   supplier: uint,
   expiration: uint,
   hash: (buff 32),
 })
+
 ;; extra info for inbound swaps - not needed for the `finalize` step
 (define-map inbound-meta (buff 32) {
   sender-public-key: (buff 33),
   output-index: uint,
   csv: uint,
   sats: uint,
-  redeem-script: (buff 120),
+  redeem-script: (buff 148),
 })
 ;; mapping of txid -> preimage
 (define-map inbound-preimages (buff 32) (buff 128))
@@ -43,8 +43,7 @@
   sats: uint,
   xbtc: uint,
   supplier: uint,
-  version: (buff 1),
-  hash: (buff 20),
+  output: (buff 128),
   created-at: uint,
 })
 ;; mapping of swap -> txid
@@ -75,7 +74,6 @@
 ;; placeholder to mark inbound swap as revoked
 (define-constant REVOKED_INBOUND_PREIMAGE 0x00)
 
-(define-constant ERR_PANIC (err u1)) ;; should never be thrown
 (define-constant ERR_SUPPLIER_EXISTS (err u2))
 (define-constant ERR_UNAUTHORIZED (err u3))
 (define-constant ERR_ADD_FUNDS (err u4))
@@ -138,9 +136,9 @@
         inbound-base-fee: inbound-base-fee,
       })
     )
-    (asserts! (map-insert supplier-by-id id supplier) ERR_PANIC)
-    (asserts! (map-insert supplier-funds id u0) ERR_PANIC)
-    (asserts! (map-insert supplier-escrow id u0) ERR_PANIC)
+    (map-insert supplier-by-id id supplier)
+    (map-insert supplier-funds id u0)
+    (map-insert supplier-escrow id u0)
     (try! (validate-fee inbound-fee))
     (try! (validate-fee outbound-fee))
 
@@ -162,6 +160,7 @@
 (define-public (add-funds (amount uint))
   (let
     (
+      ;; #[filter(amount, new-funds)]
       (supplier-id (unwrap! (get-supplier-id-by-controller contract-caller) ERR_UNAUTHORIZED))
       (existing-funds (get-funds supplier-id))
       (new-funds (+ amount existing-funds))
@@ -209,7 +208,7 @@
   (let
     (
       (supplier-id (unwrap! (get-supplier-id-by-controller contract-caller) ERR_UNAUTHORIZED))
-      (existing-supplier (unwrap! (get-supplier supplier-id) ERR_PANIC))
+      (existing-supplier (unwrap-panic (get-supplier supplier-id)))
       (new-supplier (merge existing-supplier {
         inbound-fee: inbound-fee, 
         outbound-fee: outbound-fee, 
@@ -233,34 +232,15 @@
   (let
     (
       (supplier-id (unwrap! (get-supplier-id-by-controller contract-caller) ERR_UNAUTHORIZED))
-      (existing-supplier (unwrap! (get-supplier supplier-id) ERR_PANIC))
+      (existing-supplier (unwrap-panic (get-supplier supplier-id)))
       (new-supplier (merge existing-supplier {
         public-key: public-key,
       }))
     )
     (asserts! (map-insert supplier-by-public-key public-key supplier-id) ERR_SUPPLIER_EXISTS)
-    (asserts! (map-delete supplier-by-public-key (get public-key existing-supplier)) ERR_PANIC)
+    (map-delete supplier-by-public-key (get public-key existing-supplier))
     (map-set supplier-by-id supplier-id new-supplier)
     (ok new-supplier)
-  )
-)
-
-
-;; As a swapper, register with the contract to generate your `swapper-id`.
-;; This is required to generate BTC deposit addresses that include metadata
-;; that point to a specific STX address as the swapper.
-;;
-;; @returns the newly generated swapper ID.
-(define-public (initialize-swapper)
-  (let
-    (
-      (swapper tx-sender)
-      (id (var-get next-swapper-id))
-    )
-    (asserts! (map-insert swapper-by-id id swapper) ERR_PANIC)
-    (asserts! (map-insert swapper-by-principal swapper id) ERR_SWAPPER_EXISTS)
-    (var-set next-swapper-id (+ id u1))
-    (ok id)
   )
 )
 
@@ -286,9 +266,10 @@
 ;; @param recipient; The supplier's public key used in the HTLC
 ;; @param expiration-buff; A 4-byte integer the indicated the expiration of the HTLC
 ;; @param hash; a hash of the `preimage` used in this swap
-;; @param swapper-buff; a 4-byte integer that indicates the `swapper-id`
+;; @param swapper; the STX address receiving xBTC from this swap
 ;; @param supplier-id; the supplier used in this swap
-;; @param min-to-receive; minimum receivable calculated off-chain to avoid the supplier front-run the swap by adjusting fees
+;; @param max-base-fee; the maximum base fee that the supplier can charge
+;; @param max-fee-rate; the maximum fee rate that the supplier can charge
 (define-public (escrow-swap
     (block { header: (buff 80), height: uint })
     (prev-blocks (list 10 (buff 80)))
@@ -299,35 +280,37 @@
     (recipient (buff 33))
     (expiration-buff (buff 4))
     (hash (buff 32))
-    (swapper-buff (buff 4))
+    (swapper principal)
     (supplier-id uint)
-    (min-to-receive uint)
+    (max-base-fee int)
+    (max-fee-rate int)
   )
   (let
     (
       (was-mined-bool (unwrap! (contract-call? .clarity-bitcoin was-tx-mined-prev? block prev-blocks tx proof) ERR_TX_NOT_MINED))
       (was-mined (asserts! was-mined-bool ERR_TX_NOT_MINED))
       (mined-height (get height block))
-      (htlc-redeem (generate-htlc-script sender recipient expiration-buff hash swapper-buff))
-      (htlc-output (generate-script-hash htlc-redeem))
+      (metadata (hash-metadata swapper max-base-fee max-fee-rate))
+      (htlc-redeem (generate-htlc-script sender recipient expiration-buff hash metadata))
+      (htlc-output (generate-wsh-output htlc-redeem))
       (parsed-tx (unwrap! (contract-call? .clarity-bitcoin parse-tx tx) ERR_INVALID_TX))
       (output (unwrap! (element-at (get outs parsed-tx) output-index) ERR_INVALID_TX))
       (output-script (get scriptPubKey output))
       (supplier (unwrap! (map-get? supplier-by-id supplier-id) ERR_INVALID_SUPPLIER))
       (sats (get value output))
       (fee-rate (unwrap! (get inbound-fee supplier) ERR_INVALID_SUPPLIER))
-      (xbtc (try! (get-swap-amount sats fee-rate (get inbound-base-fee supplier))))
+      (base-fee (get inbound-base-fee supplier))
+      (xbtc (try! (get-swap-amount sats fee-rate base-fee)))
       (funds (get-funds supplier-id))
       (funds-ok (asserts! (>= funds xbtc) ERR_INSUFFICIENT_FUNDS))
-      (escrowed (unwrap! (map-get? supplier-escrow supplier-id) ERR_PANIC))
+      (escrowed (unwrap-panic (map-get? supplier-escrow supplier-id)))
       (new-funds (- funds xbtc))
       (new-escrow (+ escrowed xbtc))
-      (expiration (try! (read-uint32 expiration-buff (len expiration-buff))))
-      (swapper-id (try! (read-uint32 swapper-buff u4)))
+      (expiration (try! (read-varint expiration-buff)))
       (txid (contract-call? .clarity-bitcoin get-txid tx))
       (expiration-ok (try! (validate-expiration expiration mined-height)))
       (escrow {
-        swapper: swapper-id,
+        swapper: swapper,
         supplier: supplier-id,
         xbtc: xbtc,
         expiration: (+ mined-height (- expiration ESCROW_EXPIRATION)),
@@ -342,13 +325,14 @@
       })
     )
     ;; assert tx-sender is swapper
-    (asserts! (is-eq tx-sender (unwrap! (map-get? swapper-by-id swapper-id) ERR_SWAPPER_NOT_FOUND)) ERR_UNAUTHORIZED)
+    ;; (asserts! (is-eq tx-sender (unwrap! (map-get? swapper-by-id swapper-id) ERR_SWAPPER_NOT_FOUND)) ERR_UNAUTHORIZED)
     (asserts! (is-eq (get public-key supplier) recipient) ERR_INVALID_OUTPUT)
     (asserts! (is-eq output-script htlc-output) ERR_INVALID_OUTPUT)
     (asserts! (is-eq (len hash) u32) ERR_INVALID_HASH)
     (asserts! (map-insert inbound-swaps txid escrow) ERR_TXID_USED)
-    (asserts! (map-insert inbound-meta txid meta) ERR_PANIC)
-    (asserts! (>= xbtc min-to-receive) ERR_INCONSISTENT_FEES)
+    (map-insert inbound-meta txid meta)
+    (asserts! (<= base-fee max-base-fee) ERR_INCONSISTENT_FEES)
+    (asserts! (<= fee-rate max-fee-rate) ERR_INCONSISTENT_FEES)
     (map-set supplier-funds supplier-id new-funds)
     (map-set supplier-escrow supplier-id new-escrow)
     (print (merge (merge escrow meta) { 
@@ -377,8 +361,8 @@
         (preimage-ok (asserts! (is-eq (sha256 preimage) stored-hash) ERR_INVALID_PREIMAGE))
         (supplier-id (get supplier swap))
         (xbtc (get xbtc swap))
-        (escrowed (unwrap! (map-get? supplier-escrow supplier-id) ERR_PANIC))
-        (swapper (unwrap! (get-swapper-principal (get swapper swap)) ERR_PANIC))
+        (escrowed (unwrap-panic (map-get? supplier-escrow supplier-id)))
+        (swapper (get swapper swap))
       )
       (map-insert inbound-preimages txid preimage)
       (try! (as-contract (transfer xbtc tx-sender swapper)))
@@ -418,7 +402,7 @@
         (xbtc (get xbtc swap))
         (supplier-id (get supplier swap))
         (funds (get-funds supplier-id))
-        (escrowed (unwrap! (get-escrow supplier-id) ERR_PANIC))
+        (escrowed (unwrap-panic (get-escrow supplier-id)))
         (new-funds (+ funds xbtc))
         (new-escrow (- escrowed xbtc))
       )
@@ -435,18 +419,15 @@
   )
 )
 
-;; outbound swaps
-
 ;; Initiate an outbound swap.
 ;; Swapper provides the amount of xBTC and their withdraw address.
 ;;
 ;; @returns the auto-generated swap-id of this swap
 ;;
 ;; @param xbtc; amount of xBTC (sats) to swap
-;; @param btc-version; the address version for the swapper's BTC address
-;; @param btc-hash; the hash for the swapper's BTC address
+;; @param output; the output script for the swapper's BTC address
 ;; @param supplier-id; the supplier used for this swap
-(define-public (initiate-outbound-swap (xbtc uint) (btc-version (buff 1)) (btc-hash (buff 20)) (supplier-id uint))
+(define-public (initiate-outbound-swap (xbtc uint) (output (buff 128)) (supplier-id uint))
   (let
     (
       (supplier (unwrap! (map-get? supplier-by-id supplier-id) ERR_INVALID_SUPPLIER))
@@ -456,16 +437,15 @@
         sats: sats,
         xbtc: xbtc,
         supplier: supplier-id,
-        version: btc-version,
-        hash: btc-hash,
+        output: output,
         created-at: burn-block-height,
         swapper: tx-sender,
       })
       (swap-id (var-get next-outbound-id))
     )
-    (try! (validate-btc-addr btc-version btc-hash))
+    ;; #[filter(xbtc)]
     (try! (transfer xbtc tx-sender (as-contract tx-sender)))
-    (asserts! (map-insert outbound-swaps swap-id swap) ERR_PANIC)
+    (map-insert outbound-swaps swap-id swap)
     (var-set next-outbound-id (+ swap-id u1))
     (print (merge swap {
       swap-id: swap-id,
@@ -501,8 +481,7 @@
     (
       (was-mined-bool (unwrap! (contract-call? .clarity-bitcoin was-tx-mined-prev? block prev-blocks tx proof) ERR_TX_NOT_MINED))
       (was-mined (asserts! was-mined-bool ERR_TX_NOT_MINED))
-      (swap (unwrap! (get-outbound-swap swap-id) ERR_SWAP_NOT_FOUND))
-      (expected-output (generate-output (get version swap) (get hash swap)))
+      (swap (unwrap! (map-get? outbound-swaps swap-id) ERR_SWAP_NOT_FOUND))
       (parsed-tx (unwrap! (contract-call? .clarity-bitcoin parse-tx tx) ERR_INVALID_TX))
       (output (unwrap! (element-at (get outs parsed-tx) output-index) ERR_INVALID_TX))
       (output-script (get scriptPubKey output))
@@ -513,7 +492,7 @@
       (funds-before (get-funds supplier))
     )
     (map-set supplier-funds supplier (+ funds-before xbtc))
-    (asserts! (is-eq output-script expected-output) ERR_INVALID_OUTPUT)
+    (asserts! (is-eq output-script (get output swap)) ERR_INVALID_OUTPUT)
     (asserts! (map-insert completed-outbound-swaps swap-id txid) ERR_ALREADY_FINALIZED)
     (asserts! (map-insert completed-outbound-swap-txids txid swap-id) ERR_TXID_USED)
     (asserts! (>= output-sats (get sats swap)) ERR_INSUFFICIENT_AMOUNT)
@@ -537,12 +516,13 @@
 (define-public (revoke-expired-outbound (swap-id uint))
   (let
     (
+      ;; #[filter(swap-id)]
       (swap (try! (validate-outbound-revocable swap-id)))
       (xbtc (get xbtc swap))
       (swapper (get swapper swap))
     )
     (try! (as-contract (transfer xbtc tx-sender swapper)))
-    (asserts! (map-insert completed-outbound-swaps swap-id REVOKED_OUTBOUND_TXID) ERR_PANIC)
+    (map-insert completed-outbound-swaps swap-id REVOKED_OUTBOUND_TXID)
     (print (merge swap {
       topic: "revoke-outbound",
       swap-id: swap-id,
@@ -591,18 +571,9 @@
 
 (define-read-only (get-completed-outbound-swap-by-txid (txid (buff 32)))
   (map-get? completed-outbound-swap-txids txid)
-)
-
-(define-read-only (get-swapper-id (swapper principal))
-  (map-get? swapper-by-principal swapper)
 )
 
-(define-read-only (get-swapper-principal (id uint))
-  (map-get? swapper-by-id id)
-)
-
 (define-read-only (get-next-supplier-id) (var-get next-supplier-id))
-(define-read-only (get-next-swapper-id) (var-get next-swapper-id))
 (define-read-only (get-next-outbound-id) (var-get next-outbound-id))
 
 (define-read-only (get-full-supplier (id uint))
@@ -610,7 +581,7 @@
     (
       (supplier (unwrap! (get-supplier id) ERR_INVALID_SUPPLIER))
       (funds (get-funds id))
-      (escrow (unwrap! (get-escrow id) ERR_PANIC))
+      (escrow (unwrap-panic (get-escrow id)))
     )
     (ok (merge supplier { funds: funds, escrow: escrow }))
   )
@@ -625,9 +596,8 @@
     (
       (swap (unwrap! (get-inbound-swap txid) ERR_INVALID_ESCROW))
       (meta (unwrap! (get-inbound-meta txid) ERR_INVALID_ESCROW))
-      (swapper-principal (unwrap! (get-swapper-principal (get swapper swap)) ERR_PANIC))
     )
-    (ok (merge { swapper-principal: swapper-principal } (merge swap meta)))
+    (ok (merge swap meta))
   )
 )
 
@@ -669,27 +639,21 @@
   )
 )
 
-(define-read-only (concat-buffs (buffs (list 6 (buff 32))))
-  (let
-    (
-      (initial-buff 0x)
-      (final (fold concat-buffs-fold buffs initial-buff))
-    )
-    final
-  )
+(define-read-only (serialize-metadata (swapper principal) (base-fee int) (fee-rate int))
+  (unwrap-panic (to-consensus-buff? {
+    swapper: swapper,
+    base-fee: base-fee,
+    fee-rate: fee-rate,
+  }))
 )
 
-(define-private (concat-buffs-fold (b (buff 32)) (result (buff 192)))
-  (let
-    (
-      (next-buff (concat result b))
-      (next-buff-min (as-max-len? next-buff u192))
-    )
-    (match next-buff-min
-      min-buff min-buff
-      result ;; if using `concat-buffs`, this should never happen.
-    )
-  )
+;; Generate a metadata hash, which is embedded in an inbound HTLC.
+;; 
+;; @param swapper; the STX address of the recipient of the swap
+;; @param base-fee; the maximum base fee that can be charged by the supplier
+;; @param fee-rate; the maximum fee rate that can be charged by the supplier
+(define-read-only (hash-metadata (swapper principal) (base-fee int) (fee-rate int))
+  (sha256 (serialize-metadata swapper base-fee fee-rate))
 )
 
 (define-read-only (get-swap-amount (amount uint) (fee-rate int) (base-fee int))
@@ -776,17 +740,6 @@
   )
 )
 
-(define-read-only (validate-btc-addr (version (buff 1)) (hash (buff 20)))
-  (let
-    (
-      (valid-hash (is-eq (len hash) u20))
-      (valid-version (or (is-eq version P2PKH_VERSION) (is-eq version P2SH_VERSION)))
-    )
-    (asserts! (and valid-hash valid-version) ERR_INVALID_BTC_ADDR)
-    (ok true)
-  )
-)
-
 ;; lookup an outbound swap and validate that it is revocable.
 ;; to be revoked, it must be expired and not finalized
 (define-read-only (validate-outbound-revocable (swap-id uint))
@@ -811,98 +764,51 @@
     (recipient (buff 33))
     (expiration (buff 4))
     (hash (buff 32))
-    (swapper (buff 4))
+    (metadata (buff 32))
   )
-  (let
-    (
-      (swapper-id (concat 0x04 swapper))
-      (b10 (concat swapper-id 0x7563a820))
-      (b1 (concat b10 hash))
-      (b2 (concat b1 0x8821))
-      (b3 (concat b2 recipient))
-      (b4 (concat b3 0x67))
-      (exp-len (bytes-len expiration))
-      (b9 (concat b4 exp-len))
-      (b5 (concat b9 expiration))
-      (b6 (concat b5 0xb27521))
-      (b7 (concat b6 sender))
-      (b8 (concat b7 0x68ac))
-    )
-    b8
-  )
+  (concat 0x20
+  (concat metadata
+  (concat 0x7563a820 ;; DROP; IF; PUSH32
+  (concat hash
+  (concat 0x8821 ;; EQUALVERIFY; PUSH33
+  (concat recipient
+  (concat 0x67 ;; ELSE
+  (concat (bytes-len expiration)
+  (concat expiration
+  (concat 0xb27521 ;; CHECKSEQUENCEVERIFY; DROP; PUSH33
+  (concat sender 0x68ac) ;; ENDIF; CHECKSIG;
+  ))))))))))
 )
 
-(define-read-only (generate-script-hash (script (buff 120)))
-  (generate-p2sh-output (hash160 script))
+(define-read-only (generate-wsh-output (script (buff 148)))
+  (concat 0x0020 (sha256 script))
 )
 
-(define-read-only (generate-htlc-script-hash
-    (sender (buff 33))
-    (recipient (buff 33))
-    (expiration (buff 4))
-    (hash (buff 32))
-    (swapper (buff 4))
-  )
-  (generate-script-hash (generate-htlc-script sender recipient expiration hash swapper))
-)
-
-(define-read-only (generate-p2pkh-output (hash (buff 20)))
-  (concat (concat 0x76a914 hash) 0x88ac)
-)
-
-(define-read-only (generate-p2sh-output (hash (buff 20)))
-  (concat (concat 0xa914 hash) 0x87)
-)
-
-;; generate an output, given btc address.
-;; assumes that if the version is not p2sh, it's p2pkh.
-;; for outbound swaps, the version is validated when initiated,
-;; so it should only ever be these two.
-(define-read-only (generate-output (version (buff 1)) (hash (buff 20)))
-  (if (is-eq version P2SH_VERSION)
-    (generate-p2sh-output hash)
-    (generate-p2pkh-output hash)
-  )
-)
-
 (define-read-only (bytes-len (bytes (buff 4)))
   (unwrap-panic (element-at BUFF_TO_BYTE (len bytes)))
 )
 
 (define-constant ERR_READ_UINT (err u100))
 
-;; little-endian
-(define-read-only (read-uint32 (num (buff 4)) (length uint))
+(define-read-only (read-varint (num (buff 4)))
   (let
     (
-      (byte-1 (buff-to-u8 (unwrap! (element-at num u0) ERR_READ_UINT)))
-      (byte-2 (if (> length u1) (buff-to-u8 (unwrap! (element-at num u1) ERR_READ_UINT)) u0))
-      (byte-3 (if (> length u2) (buff-to-u8 (unwrap! (element-at num u2) ERR_READ_UINT)) u0))
-      (byte-4 (if (> length u3) (buff-to-u8 (unwrap! (element-at num u3) ERR_READ_UINT)) u0))
+      (length (len num))
     )
-    (ok (+ (* byte-4 u16777216) (* byte-3 u65536) (* byte-2 u256) byte-1))
+    (if (> length u1)
+      (let
+        (
+          (first-byte (unwrap-panic (slice? num u0 u1)))
+        )
+        (asserts! (or 
+          (and (is-eq first-byte 0xfd) (is-eq length u3))
+          (and (is-eq first-byte 0xfe) (is-eq length u4))
+        ) ERR_READ_UINT)
+        (ok (buff-to-uint-le (unwrap-panic (slice? num u1 length))))
+      )
+      (ok (buff-to-uint-le num))
+    )
   )
 )
 
-(define-read-only (buff-to-u8 (byte (buff 1)))
-    (unwrap-panic (index-of BUFF_TO_BYTE byte)))
-
-
-(define-constant BUFF_TO_BYTE (list 
-   0x00 0x01 0x02 0x03 0x04 0x05 0x06 0x07 0x08 0x09 0x0a 0x0b 0x0c 0x0d 0x0e 0x0f
-   0x10 0x11 0x12 0x13 0x14 0x15 0x16 0x17 0x18 0x19 0x1a 0x1b 0x1c 0x1d 0x1e 0x1f
-   0x20 0x21 0x22 0x23 0x24 0x25 0x26 0x27 0x28 0x29 0x2a 0x2b 0x2c 0x2d 0x2e 0x2f
-   0x30 0x31 0x32 0x33 0x34 0x35 0x36 0x37 0x38 0x39 0x3a 0x3b 0x3c 0x3d 0x3e 0x3f
-   0x40 0x41 0x42 0x43 0x44 0x45 0x46 0x47 0x48 0x49 0x4a 0x4b 0x4c 0x4d 0x4e 0x4f
-   0x50 0x51 0x52 0x53 0x54 0x55 0x56 0x57 0x58 0x59 0x5a 0x5b 0x5c 0x5d 0x5e 0x5f
-   0x60 0x61 0x62 0x63 0x64 0x65 0x66 0x67 0x68 0x69 0x6a 0x6b 0x6c 0x6d 0x6e 0x6f
-   0x70 0x71 0x72 0x73 0x74 0x75 0x76 0x77 0x78 0x79 0x7a 0x7b 0x7c 0x7d 0x7e 0x7f
-   0x80 0x81 0x82 0x83 0x84 0x85 0x86 0x87 0x88 0x89 0x8a 0x8b 0x8c 0x8d 0x8e 0x8f
-   0x90 0x91 0x92 0x93 0x94 0x95 0x96 0x97 0x98 0x99 0x9a 0x9b 0x9c 0x9d 0x9e 0x9f
-   0xa0 0xa1 0xa2 0xa3 0xa4 0xa5 0xa6 0xa7 0xa8 0xa9 0xaa 0xab 0xac 0xad 0xae 0xaf
-   0xb0 0xb1 0xb2 0xb3 0xb4 0xb5 0xb6 0xb7 0xb8 0xb9 0xba 0xbb 0xbc 0xbd 0xbe 0xbf
-   0xc0 0xc1 0xc2 0xc3 0xc4 0xc5 0xc6 0xc7 0xc8 0xc9 0xca 0xcb 0xcc 0xcd 0xce 0xcf
-   0xd0 0xd1 0xd2 0xd3 0xd4 0xd5 0xd6 0xd7 0xd8 0xd9 0xda 0xdb 0xdc 0xdd 0xde 0xdf
-   0xe0 0xe1 0xe2 0xe3 0xe4 0xe5 0xe6 0xe7 0xe8 0xe9 0xea 0xeb 0xec 0xed 0xee 0xef
-   0xf0 0xf1 0xf2 0xf3 0xf4 0xf5 0xf6 0xf7 0xf8 0xf9 0xfa 0xfb 0xfc 0xfd 0xfe 0xff
-))
+(define-constant BUFF_TO_BYTE (list 0x00 0x01 0x02 0x03 0x04))
